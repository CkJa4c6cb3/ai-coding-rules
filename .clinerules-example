# AI Coding Assistant Guidelines

## プロジェクトルール参照

### 重要な前提

実装を開始する前に、必ず以下のディレクトリの内容を参照してください：

1. `rules/` - コーディングルールとガイドライン
2. `docs/` - プロジェクトの設計・要件定義

### ディレクトリ構造と役割

```
rules/
├── basic/      # 共通・汎用的なコーディングルール
│   ├── 00_basic.md     # プロジェクトの基本ルールと構造
│   ├── 01_coding.md    # コーディング規約とプラクティス
│   └── 02_ui-design.md # UIデザインの基本原則
└── extension/  # プロジェクト固有のルール
    ├── 言語固有のルール
    ├── フレームワークのルール
    └── ライブラリの実装ルール

docs/           # プロジェクトのドキュメント
    └── 実装要件や設計ドキュメント
```

### 各ファイルの内容と目的

#### rules/basic/00_basic.md

- プロジェクトの基本構造の定義
- AI とユーザーの役割の明確化
- 実装プロセスの基本フロー
- ディレクトリ構造のガイドライン

#### rules/basic/01_coding.md

- コーディングの基本原則（SRP 等）
- 関数型アプローチの指針
- テスト駆動開発の手順
- コードスタイルとテスト戦略

#### rules/basic/02_ui-design.md

- UI デザインの 4 大原則
- 実装時の重要注意事項
- デザインシステムの参照方法
- カラーガイドライン

## 実装プロセス

1. 要件確認

   - docs/配下の該当する要件定義を参照
   - 実装範囲と期待される動作を確認

2. ルール確認

   - rules/basic/の基本ルールを確認
   - rules/extension/の該当するルールを確認

3. 実装方針の決定

   - 確認した要件とルールに基づいて方針を決定
   - 不明点がある場合は質問する

4. 実装とテスト
   - テストファーストで実装
   - レビュー基準に従ってコードを作成

## 実装時の注意事項

- プロジェクトの一貫性を保つため、既存のパターンを踏襲する
- ルールに記載がない場合は、わからない情報に関して確認してください
- 追加のルールが必要な場合は、extension/に追加を提案する
- 実装手法の選択には、必ずその理由を説明する
